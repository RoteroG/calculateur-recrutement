import streamlit as st
import pandas as pd
import time

# === CONSTANTES SECTORIELLES ===
CA_ANNUEL_PAR_POSTE = 74078  # ‚Ç¨ par salari√©/an (source : Cerfrance 2024-2025)
JOURS_TRAVAIL_ETP = 220      # jours travaill√©s/an par ETP
CA_JOUR = CA_ANNUEL_PAR_POSTE / JOURS_TRAVAIL_ETP  # ‚âà 337 ‚Ç¨/jour/ETP

VACANCE_MOYENNE_SANS = 45
VACANCE_AVEC_AGENCE = 10
COUT_PRESTATION = 2000
FIABILITE_BONUS_ZONE_EURO = 1.10

# === CONFIG PAGE ===
st.set_page_config(page_title="Calculateur √©conomies recrutement", layout="wide")

# === HEADER ===
st.title("Calculateur d‚Äô√©conomies ‚Äì Restauration (France)")
st.markdown("Estimez l'impact financier d‚Äôun poste vacant et les √©conomies r√©alis√©es "
            "gr√¢ce au **recrutement d√©l√©gu√© √† une agence sp√©cialis√©e partout en Europe**.")

# === INPUTS ===
st.sidebar.header("Param√®tres")
nb_postes = st.sidebar.number_input("Nombre de postes √† pourvoir", min_value=1, step=1, value=1)
deja_vacant = st.sidebar.number_input("Depuis combien de jours les postes sont d√©j√† vacants", min_value=0, step=1, value=0)

# === PARAM√àTRES & SOURCES ===
st.header("Param√®tres utilis√©s et sources")
st.markdown(f"""
- **CA annuel moyen par salari√© (ETP)** : {CA_ANNUEL_PAR_POSTE} ‚Ç¨  
  Source : [Cerfrance 2024-2025](https://www.cerfrance.fr/actualites/les-chiffres-cles-de-la-restauration-en-2024-2025)  
- **Jours travaill√©s annuels par ETP** : {JOURS_TRAVAIL_ETP} (base l√©gale 35h/semaine)  
- **CA moyen par jour par ETP** : {CA_JOUR:.0f} ‚Ç¨  
- **Vacance moyenne sans agence sp√©cialis√©e** : {VACANCE_MOYENNE_SANS} jours  
- **Vacance avec recrutement d√©l√©gu√©** : {VACANCE_AVEC_AGENCE} jours  
- **Co√ªt prestation fixe** : {COUT_PRESTATION} ‚Ç¨  
- **Bonus fiabilit√© zone euro** : +{int((FIABILITE_BONUS_ZONE_EURO-1)*100)}%
""")

# === BOUTON CALCUL ===
if "calcul_lance" not in st.session_state:
    st.session_state.calcul_lance = False

if st.button("Lancer le calcul des √©conomies"):
    st.session_state.calcul_lance = True

    # Messages marketing affich√©s pendant la progression
    messages = [
        "üîç Analyse des pertes actuelles...",
        "üìä Estimation du chiffre d'affaires perdu...",
        "üõ†Ô∏è Application de notre solution de recrutement...",
        "üí∏ Calcul des √©conomies r√©alis√©es...",
        "‚úÖ R√©sultats pr√™ts !"
    ]

    # Barre de progression
    progress = st.progress(0)
    status = st.empty()

    # Boucle avec progression + messages
    for i in range(100):
        progress.progress(i + 1)

        # Changement de message tous les 20%
        if i % 20 == 0 and i // 20 < len(messages):
            status.text(messages[i // 20])

        time.sleep(0.06)  # dur√©e totale ~3s

    # Nettoyage du message
    status.text("")


# === CALCULS UNIQUEMENT SI CLIC ===
if st.session_state.calcul_lance:
    vacance_sans = VACANCE_MOYENNE_SANS + deja_vacant
    cout_sans = vacance_sans * CA_JOUR * nb_postes

    cout_avec_vacance = VACANCE_AVEC_AGENCE * CA_JOUR * nb_postes
    cout_avec_total = cout_avec_vacance + (COUT_PRESTATION * nb_postes)

    economies = (cout_sans - cout_avec_total) * FIABILITE_BONUS_ZONE_EURO
    jours_ca_sauves = economies / CA_JOUR

    # === AFFICHAGE DES R√âSULTATS ===
    st.header("R√©sultats")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Sans agence sp√©cialis√©e")
        st.metric("Dur√©e vacance", f"{vacance_sans} jours")
        st.metric("Perte estim√©e", f"{cout_sans:,.0f} ‚Ç¨")

    with col2:
        st.subheader("Avec recrutement d√©l√©gu√©")
        st.metric("Dur√©e vacance", f"{VACANCE_AVEC_AGENCE} jours")
        st.metric("Co√ªt total (vacance + prestation)", f"{cout_avec_total:,.0f} ‚Ç¨")

    st.success(f"√âconomie nette r√©alis√©e : {economies:,.0f} ‚Ç¨")
    st.info(f"√âquivalent √† {jours_ca_sauves:,.0f} jours de chiffre d‚Äôaffaires sauv√©s")

    # Comparatif prestation vs √©conomies
    st.subheader("Analyse du rapport co√ªt / gain")
    st.write(f"- **Co√ªt de la prestation** : {COUT_PRESTATION * nb_postes:,.0f} ‚Ç¨")
    st.write(f"- **√âconomies g√©n√©r√©es gr√¢ce √† cette prestation** : {economies:,.0f} ‚Ç¨")
    st.write(f"- Chaque euro investi dans la prestation g√©n√®re environ "
             f"**{economies / (COUT_PRESTATION * nb_postes):.1f} ‚Ç¨** d‚Äô√©conomies nettes.")

    # === CHART COMPARATIF ===
    data = pd.DataFrame({
        "Sc√©nario": ["Sans agence sp√©cialis√©e", "Avec recrutement d√©l√©gu√©"],
        "Montant (‚Ç¨)": [cout_sans, cout_avec_total]
    })
    st.bar_chart(data.set_index("Sc√©nario"))
